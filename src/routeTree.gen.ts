/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteImport } from './routes/_main'
import { Route as MainIndexRouteImport } from './routes/_main.index'
import { Route as MainSettingIndexRouteImport } from './routes/_main.setting.index'
import { Route as MainLogIndexRouteImport } from './routes/_main.log.index'
import { Route as MainChatIndexRouteImport } from './routes/_main.chat.index'
import { Route as MainSettingGenericRouteImport } from './routes/_main.setting.generic'
import { Route as MainChatIdRouteImport } from './routes/_main.chat.$id'
import { Route as MainSettingProviderIndexRouteImport } from './routes/_main.setting.provider.index'
import { Route as MainSettingPrefabIndexRouteImport } from './routes/_main.setting.prefab.index'
import { Route as MainSettingPluginIndexRouteImport } from './routes/_main.setting.plugin.index'
import { Route as MainSettingProviderNewRouteImport } from './routes/_main.setting.provider.new'
import { Route as MainSettingProviderIdRouteImport } from './routes/_main.setting.provider.$id'
import { Route as MainSettingPrefabNewRouteImport } from './routes/_main.setting.prefab.new'
import { Route as MainSettingPrefabDownloadRouteImport } from './routes/_main.setting.prefab.download'
import { Route as MainSettingPrefabIdRouteImport } from './routes/_main.setting.prefab.$id'
import { Route as MainSettingPluginNewRouteImport } from './routes/_main.setting.plugin.new'
import { Route as MainSettingPluginDownloadRouteImport } from './routes/_main.setting.plugin.download'
import { Route as MainSettingPluginIdRouteImport } from './routes/_main.setting.plugin.$id'
import { Route as MainSettingImportPrefabTypeIdRouteImport } from './routes/_main.setting.import-prefab.$type.$id'
import { Route as MainSettingConfigPluginListTypeIdRouteImport } from './routes/_main.setting.config-plugin.list.$type.$id'
import { Route as MainSettingConfigPluginConfigTypeIdPluginIdRouteImport } from './routes/_main.setting.config-plugin.config.$type.$id.$pluginId'

const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingIndexRoute = MainSettingIndexRouteImport.update({
  id: '/setting/',
  path: '/setting/',
  getParentRoute: () => MainRoute,
} as any)
const MainLogIndexRoute = MainLogIndexRouteImport.update({
  id: '/log/',
  path: '/log/',
  getParentRoute: () => MainRoute,
} as any)
const MainChatIndexRoute = MainChatIndexRouteImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingGenericRoute = MainSettingGenericRouteImport.update({
  id: '/setting/generic',
  path: '/setting/generic',
  getParentRoute: () => MainRoute,
} as any)
const MainChatIdRoute = MainChatIdRouteImport.update({
  id: '/chat/$id',
  path: '/chat/$id',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingProviderIndexRoute =
  MainSettingProviderIndexRouteImport.update({
    id: '/setting/provider/',
    path: '/setting/provider/',
    getParentRoute: () => MainRoute,
  } as any)
const MainSettingPrefabIndexRoute = MainSettingPrefabIndexRouteImport.update({
  id: '/setting/prefab/',
  path: '/setting/prefab/',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingPluginIndexRoute = MainSettingPluginIndexRouteImport.update({
  id: '/setting/plugin/',
  path: '/setting/plugin/',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingProviderNewRoute = MainSettingProviderNewRouteImport.update({
  id: '/setting/provider/new',
  path: '/setting/provider/new',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingProviderIdRoute = MainSettingProviderIdRouteImport.update({
  id: '/setting/provider/$id',
  path: '/setting/provider/$id',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingPrefabNewRoute = MainSettingPrefabNewRouteImport.update({
  id: '/setting/prefab/new',
  path: '/setting/prefab/new',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingPrefabDownloadRoute =
  MainSettingPrefabDownloadRouteImport.update({
    id: '/setting/prefab/download',
    path: '/setting/prefab/download',
    getParentRoute: () => MainRoute,
  } as any)
const MainSettingPrefabIdRoute = MainSettingPrefabIdRouteImport.update({
  id: '/setting/prefab/$id',
  path: '/setting/prefab/$id',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingPluginNewRoute = MainSettingPluginNewRouteImport.update({
  id: '/setting/plugin/new',
  path: '/setting/plugin/new',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingPluginDownloadRoute =
  MainSettingPluginDownloadRouteImport.update({
    id: '/setting/plugin/download',
    path: '/setting/plugin/download',
    getParentRoute: () => MainRoute,
  } as any)
const MainSettingPluginIdRoute = MainSettingPluginIdRouteImport.update({
  id: '/setting/plugin/$id',
  path: '/setting/plugin/$id',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingImportPrefabTypeIdRoute =
  MainSettingImportPrefabTypeIdRouteImport.update({
    id: '/setting/import-prefab/$type/$id',
    path: '/setting/import-prefab/$type/$id',
    getParentRoute: () => MainRoute,
  } as any)
const MainSettingConfigPluginListTypeIdRoute =
  MainSettingConfigPluginListTypeIdRouteImport.update({
    id: '/setting/config-plugin/list/$type/$id',
    path: '/setting/config-plugin/list/$type/$id',
    getParentRoute: () => MainRoute,
  } as any)
const MainSettingConfigPluginConfigTypeIdPluginIdRoute =
  MainSettingConfigPluginConfigTypeIdPluginIdRouteImport.update({
    id: '/setting/config-plugin/config/$type/$id/$pluginId',
    path: '/setting/config-plugin/config/$type/$id/$pluginId',
    getParentRoute: () => MainRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof MainIndexRoute
  '/chat/$id': typeof MainChatIdRoute
  '/setting/generic': typeof MainSettingGenericRoute
  '/chat': typeof MainChatIndexRoute
  '/log': typeof MainLogIndexRoute
  '/setting': typeof MainSettingIndexRoute
  '/setting/plugin/$id': typeof MainSettingPluginIdRoute
  '/setting/plugin/download': typeof MainSettingPluginDownloadRoute
  '/setting/plugin/new': typeof MainSettingPluginNewRoute
  '/setting/prefab/$id': typeof MainSettingPrefabIdRoute
  '/setting/prefab/download': typeof MainSettingPrefabDownloadRoute
  '/setting/prefab/new': typeof MainSettingPrefabNewRoute
  '/setting/provider/$id': typeof MainSettingProviderIdRoute
  '/setting/provider/new': typeof MainSettingProviderNewRoute
  '/setting/plugin': typeof MainSettingPluginIndexRoute
  '/setting/prefab': typeof MainSettingPrefabIndexRoute
  '/setting/provider': typeof MainSettingProviderIndexRoute
  '/setting/import-prefab/$type/$id': typeof MainSettingImportPrefabTypeIdRoute
  '/setting/config-plugin/list/$type/$id': typeof MainSettingConfigPluginListTypeIdRoute
  '/setting/config-plugin/config/$type/$id/$pluginId': typeof MainSettingConfigPluginConfigTypeIdPluginIdRoute
}
export interface FileRoutesByTo {
  '/': typeof MainIndexRoute
  '/chat/$id': typeof MainChatIdRoute
  '/setting/generic': typeof MainSettingGenericRoute
  '/chat': typeof MainChatIndexRoute
  '/log': typeof MainLogIndexRoute
  '/setting': typeof MainSettingIndexRoute
  '/setting/plugin/$id': typeof MainSettingPluginIdRoute
  '/setting/plugin/download': typeof MainSettingPluginDownloadRoute
  '/setting/plugin/new': typeof MainSettingPluginNewRoute
  '/setting/prefab/$id': typeof MainSettingPrefabIdRoute
  '/setting/prefab/download': typeof MainSettingPrefabDownloadRoute
  '/setting/prefab/new': typeof MainSettingPrefabNewRoute
  '/setting/provider/$id': typeof MainSettingProviderIdRoute
  '/setting/provider/new': typeof MainSettingProviderNewRoute
  '/setting/plugin': typeof MainSettingPluginIndexRoute
  '/setting/prefab': typeof MainSettingPrefabIndexRoute
  '/setting/provider': typeof MainSettingProviderIndexRoute
  '/setting/import-prefab/$type/$id': typeof MainSettingImportPrefabTypeIdRoute
  '/setting/config-plugin/list/$type/$id': typeof MainSettingConfigPluginListTypeIdRoute
  '/setting/config-plugin/config/$type/$id/$pluginId': typeof MainSettingConfigPluginConfigTypeIdPluginIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteWithChildren
  '/_main/': typeof MainIndexRoute
  '/_main/chat/$id': typeof MainChatIdRoute
  '/_main/setting/generic': typeof MainSettingGenericRoute
  '/_main/chat/': typeof MainChatIndexRoute
  '/_main/log/': typeof MainLogIndexRoute
  '/_main/setting/': typeof MainSettingIndexRoute
  '/_main/setting/plugin/$id': typeof MainSettingPluginIdRoute
  '/_main/setting/plugin/download': typeof MainSettingPluginDownloadRoute
  '/_main/setting/plugin/new': typeof MainSettingPluginNewRoute
  '/_main/setting/prefab/$id': typeof MainSettingPrefabIdRoute
  '/_main/setting/prefab/download': typeof MainSettingPrefabDownloadRoute
  '/_main/setting/prefab/new': typeof MainSettingPrefabNewRoute
  '/_main/setting/provider/$id': typeof MainSettingProviderIdRoute
  '/_main/setting/provider/new': typeof MainSettingProviderNewRoute
  '/_main/setting/plugin/': typeof MainSettingPluginIndexRoute
  '/_main/setting/prefab/': typeof MainSettingPrefabIndexRoute
  '/_main/setting/provider/': typeof MainSettingProviderIndexRoute
  '/_main/setting/import-prefab/$type/$id': typeof MainSettingImportPrefabTypeIdRoute
  '/_main/setting/config-plugin/list/$type/$id': typeof MainSettingConfigPluginListTypeIdRoute
  '/_main/setting/config-plugin/config/$type/$id/$pluginId': typeof MainSettingConfigPluginConfigTypeIdPluginIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat/$id'
    | '/setting/generic'
    | '/chat'
    | '/log'
    | '/setting'
    | '/setting/plugin/$id'
    | '/setting/plugin/download'
    | '/setting/plugin/new'
    | '/setting/prefab/$id'
    | '/setting/prefab/download'
    | '/setting/prefab/new'
    | '/setting/provider/$id'
    | '/setting/provider/new'
    | '/setting/plugin'
    | '/setting/prefab'
    | '/setting/provider'
    | '/setting/import-prefab/$type/$id'
    | '/setting/config-plugin/list/$type/$id'
    | '/setting/config-plugin/config/$type/$id/$pluginId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat/$id'
    | '/setting/generic'
    | '/chat'
    | '/log'
    | '/setting'
    | '/setting/plugin/$id'
    | '/setting/plugin/download'
    | '/setting/plugin/new'
    | '/setting/prefab/$id'
    | '/setting/prefab/download'
    | '/setting/prefab/new'
    | '/setting/provider/$id'
    | '/setting/provider/new'
    | '/setting/plugin'
    | '/setting/prefab'
    | '/setting/provider'
    | '/setting/import-prefab/$type/$id'
    | '/setting/config-plugin/list/$type/$id'
    | '/setting/config-plugin/config/$type/$id/$pluginId'
  id:
    | '__root__'
    | '/_main'
    | '/_main/'
    | '/_main/chat/$id'
    | '/_main/setting/generic'
    | '/_main/chat/'
    | '/_main/log/'
    | '/_main/setting/'
    | '/_main/setting/plugin/$id'
    | '/_main/setting/plugin/download'
    | '/_main/setting/plugin/new'
    | '/_main/setting/prefab/$id'
    | '/_main/setting/prefab/download'
    | '/_main/setting/prefab/new'
    | '/_main/setting/provider/$id'
    | '/_main/setting/provider/new'
    | '/_main/setting/plugin/'
    | '/_main/setting/prefab/'
    | '/_main/setting/provider/'
    | '/_main/setting/import-prefab/$type/$id'
    | '/_main/setting/config-plugin/list/$type/$id'
    | '/_main/setting/config-plugin/config/$type/$id/$pluginId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/': {
      id: '/_main/setting/'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof MainSettingIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/log/': {
      id: '/_main/log/'
      path: '/log'
      fullPath: '/log'
      preLoaderRoute: typeof MainLogIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/chat/': {
      id: '/_main/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof MainChatIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/generic': {
      id: '/_main/setting/generic'
      path: '/setting/generic'
      fullPath: '/setting/generic'
      preLoaderRoute: typeof MainSettingGenericRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/chat/$id': {
      id: '/_main/chat/$id'
      path: '/chat/$id'
      fullPath: '/chat/$id'
      preLoaderRoute: typeof MainChatIdRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/provider/': {
      id: '/_main/setting/provider/'
      path: '/setting/provider'
      fullPath: '/setting/provider'
      preLoaderRoute: typeof MainSettingProviderIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/prefab/': {
      id: '/_main/setting/prefab/'
      path: '/setting/prefab'
      fullPath: '/setting/prefab'
      preLoaderRoute: typeof MainSettingPrefabIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/plugin/': {
      id: '/_main/setting/plugin/'
      path: '/setting/plugin'
      fullPath: '/setting/plugin'
      preLoaderRoute: typeof MainSettingPluginIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/provider/new': {
      id: '/_main/setting/provider/new'
      path: '/setting/provider/new'
      fullPath: '/setting/provider/new'
      preLoaderRoute: typeof MainSettingProviderNewRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/provider/$id': {
      id: '/_main/setting/provider/$id'
      path: '/setting/provider/$id'
      fullPath: '/setting/provider/$id'
      preLoaderRoute: typeof MainSettingProviderIdRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/prefab/new': {
      id: '/_main/setting/prefab/new'
      path: '/setting/prefab/new'
      fullPath: '/setting/prefab/new'
      preLoaderRoute: typeof MainSettingPrefabNewRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/prefab/download': {
      id: '/_main/setting/prefab/download'
      path: '/setting/prefab/download'
      fullPath: '/setting/prefab/download'
      preLoaderRoute: typeof MainSettingPrefabDownloadRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/prefab/$id': {
      id: '/_main/setting/prefab/$id'
      path: '/setting/prefab/$id'
      fullPath: '/setting/prefab/$id'
      preLoaderRoute: typeof MainSettingPrefabIdRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/plugin/new': {
      id: '/_main/setting/plugin/new'
      path: '/setting/plugin/new'
      fullPath: '/setting/plugin/new'
      preLoaderRoute: typeof MainSettingPluginNewRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/plugin/download': {
      id: '/_main/setting/plugin/download'
      path: '/setting/plugin/download'
      fullPath: '/setting/plugin/download'
      preLoaderRoute: typeof MainSettingPluginDownloadRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/plugin/$id': {
      id: '/_main/setting/plugin/$id'
      path: '/setting/plugin/$id'
      fullPath: '/setting/plugin/$id'
      preLoaderRoute: typeof MainSettingPluginIdRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/import-prefab/$type/$id': {
      id: '/_main/setting/import-prefab/$type/$id'
      path: '/setting/import-prefab/$type/$id'
      fullPath: '/setting/import-prefab/$type/$id'
      preLoaderRoute: typeof MainSettingImportPrefabTypeIdRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/config-plugin/list/$type/$id': {
      id: '/_main/setting/config-plugin/list/$type/$id'
      path: '/setting/config-plugin/list/$type/$id'
      fullPath: '/setting/config-plugin/list/$type/$id'
      preLoaderRoute: typeof MainSettingConfigPluginListTypeIdRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/setting/config-plugin/config/$type/$id/$pluginId': {
      id: '/_main/setting/config-plugin/config/$type/$id/$pluginId'
      path: '/setting/config-plugin/config/$type/$id/$pluginId'
      fullPath: '/setting/config-plugin/config/$type/$id/$pluginId'
      preLoaderRoute: typeof MainSettingConfigPluginConfigTypeIdPluginIdRouteImport
      parentRoute: typeof MainRoute
    }
  }
}

interface MainRouteChildren {
  MainIndexRoute: typeof MainIndexRoute
  MainChatIdRoute: typeof MainChatIdRoute
  MainSettingGenericRoute: typeof MainSettingGenericRoute
  MainChatIndexRoute: typeof MainChatIndexRoute
  MainLogIndexRoute: typeof MainLogIndexRoute
  MainSettingIndexRoute: typeof MainSettingIndexRoute
  MainSettingPluginIdRoute: typeof MainSettingPluginIdRoute
  MainSettingPluginDownloadRoute: typeof MainSettingPluginDownloadRoute
  MainSettingPluginNewRoute: typeof MainSettingPluginNewRoute
  MainSettingPrefabIdRoute: typeof MainSettingPrefabIdRoute
  MainSettingPrefabDownloadRoute: typeof MainSettingPrefabDownloadRoute
  MainSettingPrefabNewRoute: typeof MainSettingPrefabNewRoute
  MainSettingProviderIdRoute: typeof MainSettingProviderIdRoute
  MainSettingProviderNewRoute: typeof MainSettingProviderNewRoute
  MainSettingPluginIndexRoute: typeof MainSettingPluginIndexRoute
  MainSettingPrefabIndexRoute: typeof MainSettingPrefabIndexRoute
  MainSettingProviderIndexRoute: typeof MainSettingProviderIndexRoute
  MainSettingImportPrefabTypeIdRoute: typeof MainSettingImportPrefabTypeIdRoute
  MainSettingConfigPluginListTypeIdRoute: typeof MainSettingConfigPluginListTypeIdRoute
  MainSettingConfigPluginConfigTypeIdPluginIdRoute: typeof MainSettingConfigPluginConfigTypeIdPluginIdRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainIndexRoute: MainIndexRoute,
  MainChatIdRoute: MainChatIdRoute,
  MainSettingGenericRoute: MainSettingGenericRoute,
  MainChatIndexRoute: MainChatIndexRoute,
  MainLogIndexRoute: MainLogIndexRoute,
  MainSettingIndexRoute: MainSettingIndexRoute,
  MainSettingPluginIdRoute: MainSettingPluginIdRoute,
  MainSettingPluginDownloadRoute: MainSettingPluginDownloadRoute,
  MainSettingPluginNewRoute: MainSettingPluginNewRoute,
  MainSettingPrefabIdRoute: MainSettingPrefabIdRoute,
  MainSettingPrefabDownloadRoute: MainSettingPrefabDownloadRoute,
  MainSettingPrefabNewRoute: MainSettingPrefabNewRoute,
  MainSettingProviderIdRoute: MainSettingProviderIdRoute,
  MainSettingProviderNewRoute: MainSettingProviderNewRoute,
  MainSettingPluginIndexRoute: MainSettingPluginIndexRoute,
  MainSettingPrefabIndexRoute: MainSettingPrefabIndexRoute,
  MainSettingProviderIndexRoute: MainSettingProviderIndexRoute,
  MainSettingImportPrefabTypeIdRoute: MainSettingImportPrefabTypeIdRoute,
  MainSettingConfigPluginListTypeIdRoute:
    MainSettingConfigPluginListTypeIdRoute,
  MainSettingConfigPluginConfigTypeIdPluginIdRoute:
    MainSettingConfigPluginConfigTypeIdPluginIdRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
